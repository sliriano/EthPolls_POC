pragma solidity ^0.4.24;

contract Polls {
    
    struct Poll {
        //voting choices
        string option1;
        string option2;
        string option3;
        string option4;
        string option5;
        uint optionsUsed; //amount of choices you will have for users to vote on
        address[] voters; // list of people who have voted
        string[] optionList; // list of the options
        mapping(string=>uint) voteValues; //options mapped to amount of votes
        mapping(address=>bool) hasVoted; // keeps track of who has voted
        
    }

    mapping(address=>Poll) public polls; // creator => poll
    
    function createPoll(string option1, string option2, string option3, string option4, string option5,uint choices) public returns(string) {
        address[] filler; //filler array passed into the poll
        address creator = msg.sender;
        string[] optionList; //also a filler
        if (_checkPoll(creator)) { // if user has a poll then..
            return "You must destroy your other poll in order to create a new one";
        }
        else {
            polls[creator] = Poll(option1,option2,option3,option4,option5,choices,filler,optionList); // create poll
            //add options to the optionList
            polls[creator].optionList.push(option1);
            polls[creator].optionList.push(option2);
            polls[creator].optionList.push(option3);
            polls[creator].optionList.push(option4);
            polls[creator].optionList.push(option5);
            return "Creation complete";
        }
    }
    
    function _checkPoll(address _user) private view returns (bool){
        if(polls[_user].voters.length >0){ //checks if the user currently has a poll
            return true;
        }
        return false;
    }
    
    function vote(address creatorAddress, uint decision) public returns(string) {
        if(_checkVoter(msg.sender,creatorAddress) == false) { // if the user has not yet voted
            if (decision> polls[creatorAddress].optionsUsed || decision <=0){
                return "Invalid Decision";
            }
            else {
                polls[creatorAddress].voteValues[polls[creatorAddress].optionList[decision-1]] += 1; // increase the vote amount by 1
                polls[creatorAddress].hasVoted[msg.sender] = true;
                polls[creatorAddress].voters.push(msg.sender);
                return "Success";
            }
        }
        return "You voted already";
    }

    function _checkVoter(address _user, address creator) private view returns (bool) {
        if (polls[creator].hasVoted[_user]){ // checks if voter has voted yet
            return true;
        }
        return false;
    }
    function destroyPoll(address _user) public {
        if (_user == msg.sender) {
        uint voterCount = polls[_user].voters.length;;
            for (uint x = 0; x < voterCount; x++){
                polls[_user].hasVoted[polls[_user].voters[x]] = false;
            }
           delete polls[_user];
        }
    }
    
    //functions to display the results of each option
    function showOptionOneResults(address _user) public view returns(uint) {
        return polls[_user].voteValues[polls[_user].option1];
    }
    
    function showOptionTwoResults(address _user) public view returns(uint) {
        return polls[_user].voteValues[polls[_user].option2];
    }

    function showOptionThreeResults(address _user) public view returns(uint) {
        return polls[_user].voteValues[polls[_user].option3];
    }
    
    function showOptionFourResults(address _user) public view returns(uint) {
        return polls[_user].voteValues[polls[_user].option4];
    }
    
    function showOptionFiveResults(address _user) public view returns(uint) {
        return polls[_user].voteValues[polls[_user].option5];
    }
}
