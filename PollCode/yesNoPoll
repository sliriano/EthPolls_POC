pragma solidity ^0.4.24;

contract yesNoPoll {

    struct Poll {
        address[] noVotes;
        address[] yesVotes;
        address[] totalVotes;
        mapping(address=>bool) hasVoted;
    }

    mapping(address=>Poll) polls;

    function createPoll() public returns(string) {
        address[] no; //fillers to pass into the creation of poll
        address[] yes;
        address[] total;
        address creator = msg.sender;
        if (_checkPoll(creator)) { // if user has a poll then..
            return "You must destroy your other poll in order to create a new one";
        }
        else {
            polls[creator] = Poll(no,yes,total); // create poll
            return "Creation complete";
        }
    }

    function _checkPoll(address _user) private view returns (bool){
        if(polls[_user].totalVotes.length == 0){ //checks if the user currently has a poll
            return true;
        }
        return false;
    }

    function vote(address creatorAddress, string decision) public {
        if(_checkVoter(msg.sender,creatorAddress) == false) { // if the user has not yet voted
            if (keccak256(decision) == keccak256("yes")) { // if user votes yes
                polls[creatorAddress].yesVotes.push(msg.sender); // add user to array
            }
            else if (keccak256(decision) == keccak256("no")) {
                polls[creatorAddress].noVotes.push(msg.sender);
            }
            polls[creatorAddress].hasVoted[msg.sender] = true;
            polls[creatorAddress].totalVotes.push(msg.sender);
        }
    }

    function _checkVoter(address _user, address creator) private view returns (bool) {
        if (polls[creator].hasVoted[_user]){ // checks if voter has voted yet
            return true;
        }
        return false;
    }

    function destroyPoll(address _user) public {
        if (_user == msg.sender) {
            uint voterCount = polls[_user].totalVotes.length;
            for (uint x = 0; x < voterCount; x++){
                polls[_user].hasVoted[polls[_user].totalVotes[x]] = false;
            }
            delete polls[_user];
        }
    }

    function displayNoVotes(address _user) public view returns (uint){
        return polls[_user].noVotes.length;
    }

    function displayYesVotes(address _user) public view returns (uint) {
        return polls[_user].yesVotes.length;
    }
}
